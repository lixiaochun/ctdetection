package com.wellcell.SubFrag.Diagnosis;

import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Locale;

import android.content.Context;
import android.os.AsyncTask;
import android.os.Bundle;
import android.support.v4.app.Fragment;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.view.inputmethod.InputMethodManager;
import android.widget.ArrayAdapter;
import android.widget.AutoCompleteTextView;
import android.widget.EditText;
import android.widget.ProgressBar;
import android.widget.ScrollView;
import android.widget.TextView;

import com.wellcell.ctdetection.R;

//PING测试
public class PingFragment extends Fragment implements OnClickListener, OnResultListener
{
	TextView textResult;
	EditText package_size, package_count, timeout;
	AutoCompleteTextView address;
	ScrollView mScroll;
	private ProgressBar mProgress;
	private static final String[] addresses = new String[] { "www.baidu.com" };

	@Override
	public void onCreate(Bundle savedInstanceState)
	{
		super.onCreate(savedInstanceState);
	}

	@Override
	public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)
	{
		// return super.onCreateView(inflater, container, savedInstanceState);
		View view = inflater.inflate(R.layout.fragment_ping, null);
		// initial
		view.findViewById(R.id.ping_test).setOnClickListener(this);
		textResult = (TextView) view.findViewById(R.id.result);
		address = (AutoCompleteTextView) view.findViewById(R.id.address);
		address.setAdapter(new ArrayAdapter<String>(getActivity(), android.R.layout.simple_dropdown_item_1line, addresses));
		package_size = (EditText) view.findViewById(R.id.package_size);
		package_count = (EditText) view.findViewById(R.id.package_count);
		timeout = (EditText) view.findViewById(R.id.timeout);
		mScroll = (ScrollView) view.findViewById(R.id.scroll_result);
		mProgress = (ProgressBar) view.findViewById(R.id.progressBar1);
		return view;
	}

	@Override
	public void onHiddenChanged(boolean hidden)
	{
		super.onHiddenChanged(hidden);
		CommandTask.stop();
	}

	@Override
	public void onClick(View v)
	{
		if (CommandTask.running())
			return;
		mProgress.setVisibility(View.VISIBLE);
		textResult.setText("");
		new CommandTask().setOnResultListener(this).execute(
		// command
				"ping -c " +
				// package count
						(package_count.getText().toString().equalsIgnoreCase("") ? "5" : package_count.getText().toString())
						// package size
						+ " -s " + (package_size.getText().toString().equalsIgnoreCase("") ? "56" : package_size.getText().toString())
						// address
						+ " " + (address.getText().toString().equalsIgnoreCase("") ? addresses[0] : address.getText().toString()));
		InputMethodManager mInput = (InputMethodManager) getActivity().getSystemService(Context.INPUT_METHOD_SERVICE);
		mInput.hideSoftInputFromWindow(getActivity().getCurrentFocus().getWindowToken(), InputMethodManager.HIDE_NOT_ALWAYS);
		// disable edit
		// enable edit
		address.setEnabled(false);
		package_size.setEnabled(false);
		package_count.setEnabled(false);
		timeout.setEnabled(false);
	}

	@Override
	public void onReceiveResult(String result)
	{
		mProgress.setVisibility(View.GONE);
		textResult.append(result + "\n");
		mScroll.fullScroll(android.view.View.FOCUS_DOWN);
		// enable edit
		address.setEnabled(true);
		package_size.setEnabled(true);
		package_count.setEnabled(true);
		timeout.setEnabled(true);
	}
}


class CommandTask extends AsyncTask<String, String, Void>
{
	// about thread
	private OnResultListener listener;
	private static boolean running = false;
	// about execute commands
	public static final String TAG = CommandTask.class.getSimpleName();
	public static final String COMMAND_SH = "sh";
	public static final String COMMAND_LINE_END = "\n";
	public static final String COMMAND_EXIT = "exit\n";

	public static void stop()
	{
		running = false;
	}

	@Override
	protected Void doInBackground(String... params)
	{
		running = true;
		Log.d(TAG, "execute command start : " + params[0]);
		Process process = null;
		BufferedReader successReader = null;
		BufferedReader errorReader = null;
		StringBuilder errorMsg = null;
		DataOutputStream dos = null;
		int status = -1;
		try
		{
			// TODO
			process = Runtime.getRuntime().exec(COMMAND_SH);
			dos = new DataOutputStream(process.getOutputStream());
			dos.write(params[0].getBytes());
			dos.writeBytes(COMMAND_LINE_END);
			dos.flush();

			dos.writeBytes(COMMAND_EXIT);
			dos.flush();

			status = process.waitFor();

			errorMsg = new StringBuilder();
			successReader = new BufferedReader(new InputStreamReader(process.getInputStream()));
			errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));
			String lineStr;
			while ((lineStr = successReader.readLine()) != null && running)
			{
				publishProgress(lineStr);
				Log.d(TAG, " command line item : " + lineStr);
			}
			while ((lineStr = errorReader.readLine()) != null && running)
			{
				errorMsg.append(lineStr);
			}

		}
		catch (IOException e)
		{
			e.printStackTrace();
		}
		catch (Exception e)
		{
			e.printStackTrace();
		}
		finally
		{
			try
			{
				if (dos != null)
				{
					dos.close();
				}
				if (successReader != null)
				{
					successReader.close();
				}
				if (errorReader != null)
				{
					errorReader.close();
				}
			}
			catch (IOException e)
			{
				e.printStackTrace();
			}

			if (process != null)
			{
				process.destroy();
			}
		}
		Log.d(TAG, String.format(Locale.CHINA, "execute command end,errorMsg:%s,and status %d: ", errorMsg, status));
		running = false;
		return null;
	}

	protected void onProgressUpdate(String... progress)
	{
		// cpuUsage.setText(progress[0] + "%");
		listener.onReceiveResult(progress[0]);
	}

	public CommandTask setOnResultListener(OnResultListener listener)
	{
		this.listener = listener;
		return this;
	}

	public static boolean running()
	{
		return running;
	}
}

interface OnResultListener
{
	public void onReceiveResult(String result);
}