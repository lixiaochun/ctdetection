package com.wellcell.SubFrag.AidInfo;

import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;

import org.achartengine.ChartFactory;
import org.achartengine.model.XYMultipleSeriesDataset;
import org.achartengine.model.XYSeries;
import org.achartengine.renderer.XYMultipleSeriesRenderer;
import org.achartengine.renderer.XYSeriesRenderer;

import android.content.Context;
import android.graphics.Color;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.Environment;
import android.os.StatFs;
import android.support.v4.app.Fragment;
import android.telephony.TelephonyManager;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.FrameLayout;
import android.widget.ProgressBar;
import android.widget.TextView;

import com.wellcell.ctdetection.R;

public class PhoneFragment extends Fragment implements OnStateListener
{
	private PropertyChecker mChecker;
	private TextView textBusy, textIdle, textMemoryFree, textMemoryUsed, textSDfree, textSDused;
	private ProgressBar progressCpu, progressMemory, progressSD;
	private FrameLayout cpuFrame;
	private PolylineChart mChart;

	@Override
	public void onCreate(Bundle savedInstanceState)
	{
		super.onCreate(savedInstanceState);

	}

	@Override
	public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)
	{
		// return super.onCreateView(inflater, container, savedInstanceState);
		View view = inflater.inflate(R.layout.fragment_phone, null);
		// initial data
		// CPU
		textBusy = (TextView) view.findViewById(R.id.busy);
		textIdle = (TextView) view.findViewById(R.id.idle);
		progressCpu = (ProgressBar) view.findViewById(R.id.cpu_progress);
		cpuFrame = (FrameLayout) view.findViewById(R.id.cpu_runtime);
		mChart = new PolylineChart(getActivity());
		// memory
		textMemoryUsed = (TextView) view.findViewById(R.id.ram_used);
		textMemoryFree = (TextView) view.findViewById(R.id.ram_free);
		progressMemory = (ProgressBar) view.findViewById(R.id.ram_progress);
		// SD
		textSDused = (TextView) view.findViewById(R.id.storage_used);
		textSDfree = (TextView) view.findViewById(R.id.storage_free);
		progressSD = (ProgressBar) view.findViewById(R.id.storage_progress);
		// general
		((TextView) view.findViewById(R.id.model_value)).setText(android.os.Build.MODEL);
		((TextView) view.findViewById(R.id.version_value)).setText(android.os.Build.VERSION.RELEASE);
		((TextView) view.findViewById(R.id.imsi_value)).setText(((TelephonyManager) getActivity().getSystemService(Context.TELEPHONY_SERVICE)).getSubscriberId());
		((TextView) view.findViewById(R.id.imei_value)).setText(((TelephonyManager) getActivity().getSystemService(Context.TELEPHONY_SERVICE)).getDeviceId());

		return view;
	}

	@Override
	public void onResume()
	{
		super.onResume();
		mChecker = new PropertyChecker(this);
		mChecker.execute();
	}

	@Override
	public void onPause()
	{
		super.onPause();
		mChecker.stop();
	}

	@Override
	public void onReceiveState(Long[] properties)
	{
		// CPU
		int used = Math.round(properties[0]);
		if (used < 0)
			return;
		textBusy.setText("已用" + used + "%");
		textIdle.setText("空闲" + (100 - used) + "%");
		progressCpu.setProgress(used);
		// SD card
		textSDused.setText("已用" + (properties[2] - properties[1]) + "MB");
		textSDfree.setText("空閒" + properties[1] + "MB");
		if (properties[2] > 0)
			progressSD.setProgress(Math.round(100 * (properties[2] - properties[1]) / properties[2]));
		cpuFrame.removeAllViews();
		cpuFrame.addView(mChart.create(used));
		// memory
		textMemoryUsed.setText("已用" + (properties[4] - properties[3]) + "MB");
		textMemoryFree.setText("空閒" + properties[3] + "MB");
		if (properties[4] > 0)
			progressMemory.setProgress(Math.round(100 * (properties[4] - properties[3]) / properties[4]));
	}

}

class PropertyChecker extends AsyncTask<Void, Long, Void>
{

	private boolean checking = true;
	public static final String TAG = "Checker";
	private static final int INTERVAL = 1024;
	OnStateListener listener;

	public PropertyChecker(OnStateListener listener)
	{
		this.listener = listener;
	}

	public void stop()
	{
		checking = false;
	}

	@Override
	protected Void doInBackground(Void... params)
	{
		CpuDetail current, old = null;
		long freeSD = 0, totalSD = 0, totalMemory = 0, freeMemory = 0;
		current = calculate();
		while (checking)
		{
			// check CPU
			if (current != null)
				old = current;
			current = calculate();
			if (old == null || current == null)
				continue;

			long ratio = 0;
			if ((current.cputotal - old.cputotal) > 0)
				ratio = 100 * ((current.cputotal - old.cputotal) - (current.idle - old.idle)) / (current.cputotal - old.cputotal);

			// check SD card
			StatFs sf = new StatFs(Environment.getExternalStorageDirectory().getPath());
			long freeTmp = 0, totalTmp = 0;
			try
			{
				freeTmp = ((long) sf.getAvailableBlocks() * (long) sf.getBlockSize()) / 1024 / 1024;
				totalTmp = (sf.getBlockCount() * (long) sf.getBlockSize()) / 1024 / 1024;
			}
			catch (Exception e)
			{
				e.printStackTrace();
			}
			finally
			{
				if (freeTmp != 0 && totalTmp != 0)
				{
					freeSD = freeTmp;
					totalSD = totalTmp;
				}
			}

			// check memory
			String[] totalInfos = null;
			String[] freeInfos = null;
			try
			{
				BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream("/proc/meminfo")), 1024);
				String load = reader.readLine();
				totalInfos = load.split(" ");
				load = reader.readLine();
				freeInfos = load.split(" ");
				reader.close();
			}
			catch (IOException ex)
			{
				Log.e(TAG, "IOException" + ex.toString());
			}
			totalTmp = 0;
			freeTmp = 0;
			try
			{
				for (String str : totalInfos)
				{
					if (str.contains("M") || str.contentEquals("") || str.contains("k"))
						continue;
					else
					{
						totalMemory = Long.parseLong(str) / 1024;
						break;
					}
				}
				
				for (String str : freeInfos)
				{
					if (str.contains("M") || str.contentEquals("") || str.contains("k"))
						continue;
					else
					{
						freeMemory = Long.parseLong(str) / 1024;
						break;
					}
				}
			}
			catch (ArrayIndexOutOfBoundsException e)
			{
				Log.i(TAG, "ArrayIndexOutOfBoundsException" + e.toString());
			}
			finally
			{
				if (freeTmp != 0 && totalTmp != 0)
				{
					freeMemory = freeTmp;
					totalMemory = totalTmp;
				}
			}
			publishProgress(ratio, freeSD, totalSD, freeMemory, totalMemory);
			try
			{
				Thread.sleep(INTERVAL);
			}
			catch (InterruptedException e)
			{
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		Log.d(TAG, "Exit checking!");
		return null;
	}

	protected void onProgressUpdate(Long... progress)
	{
		// cpuUsage.setText(progress[0] + "%");
		listener.onReceiveState(progress);
	}

	private class CpuDetail
	{
		long cputotal;
		long idle;

		public CpuDetail(long cpu, long idle)
		{
			this.cputotal = cpu;
			this.idle = idle;
		}
	}

	private CpuDetail calculate()
	{
		String[] cpuInfos = null;
		try
		{
			BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream("/proc/stat")), 1024);
			String load = reader.readLine();
			reader.close();
			cpuInfos = load.split(" ");
		}
		catch (IOException ex)
		{
			Log.e(TAG, "IOException" + ex.toString());
			return null;
		}
		long totalCpu = 0, idle = 0;
		try
		{
			totalCpu = Long.parseLong(cpuInfos[2]) + Long.parseLong(cpuInfos[3]) + Long.parseLong(cpuInfos[4]) + Long.parseLong(cpuInfos[6]) + Long.parseLong(cpuInfos[5]) + Long.parseLong(cpuInfos[7]) + Long.parseLong(cpuInfos[8]);
			idle = Long.parseLong(cpuInfos[5]);
		}
		catch (ArrayIndexOutOfBoundsException e)
		{
			Log.i(TAG, "ArrayIndexOutOfBoundsException" + e.toString());
			return null;
		}
		return new CpuDetail(totalCpu, idle);
	}

}

interface OnStateListener
{
	public void onReceiveState(Long[] progress);
}

class PolylineChart
{
	private Context context;
	private ArrayList<Integer> ratios;
	private static final int MAX_SIZE = 32;
	private XYMultipleSeriesRenderer renderer;
	private XYMultipleSeriesDataset dataset;
	private XYSeries series;

	public PolylineChart(Context context)
	{
		this.context = context;
		ratios = new ArrayList<Integer>();
		// 1, 构造显示用渲染图
		renderer = new XYMultipleSeriesRenderer();
		renderer.clearYTextLabels();
		renderer.setMarginsColor(Color.WHITE);
		renderer.setMargins(new int[] { 0, 16, 0, 8 });
		renderer.setShowLegend(false);
		renderer.setShowGrid(true);
		renderer.setRange(new double[] { 0, 32, 0, 100 });
		renderer.clearXTextLabels();
		renderer.clearYTextLabels();
		renderer.setShowGridY(false);
		// 2,进行显示
		dataset = new XYMultipleSeriesDataset();
		// 2.1, 构建数据
		series = new XYSeries(null);
		// 需要绘制的点放进dataset中
		dataset.addSeries(series);
		// 3, 对点的绘制进行设置
		XYSeriesRenderer xyRenderer = new XYSeriesRenderer();
		// 3.1设置颜色
		xyRenderer.setColor(Color.BLACK);
		xyRenderer.setFillPoints(false);
		// 3.2设置点的样式
		// xyRenderer.setPointStyle(PointStyle.SQUARE);
		xyRenderer.addFillOutsideLine(new XYSeriesRenderer.FillOutsideLine(XYSeriesRenderer.FillOutsideLine.Type.BELOW));
		// 3.3, 将要绘制的点添加到坐标绘制中
		renderer.addSeriesRenderer(xyRenderer);

	}

	public View create(int ratio)
	{
		ratios.add(ratio);
		if (ratios.size() > MAX_SIZE)
			ratios.remove(0);

		series.clear();
		int xCoordinate = MAX_SIZE, index = ratios.size();
		while (index > 0)
			series.add(--xCoordinate, ratios.get(--index));

		return ChartFactory.getLineChartView(context, dataset, renderer);
	}
}